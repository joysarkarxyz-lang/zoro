class ZoroSettingTab extends PluginSettingTab { constructor(app, plugin) { super(app, plugin); this.plugin = plugin; }

display() { const { containerEl } = this; containerEl.empty();

new Setting(containerEl)
  .setName('👤 Username')
  .setDesc('Add your Zoro username to view your lists and stats — just make sure your profile is public.')
  .addText(text => text
    .setPlaceholder('Enter your Zoro username')
    .setValue(this.plugin.settings.defaultUsername)
    .onChange(async (value) => {
      this.plugin.settings.defaultUsername = value.trim();
      await this.plugin.saveSettings();
    }));

new Setting(containerEl)
  .setName('➕ Sample Notes')
  .setDesc('Creates two notes — one for Anime, one for Manga — with all your lists, search, and stats preloaded. No setup needed.')
  .addButton(button => button
    .setButtonText('Create Note')
    .setTooltip('Click to create a sample note in your vault')
    .onClick(async () => {
      await this.plugin.createSampleNotes();
    }));

new Setting(containerEl)
  .setName('🧊 Layout')
  .setDesc('Choose the default layout for media lists')
  .addDropdown(dropdown => dropdown
    .addOption('card', 'Card Layout')
    .addOption('table', 'Table Layout')
    .setValue(this.plugin.settings.defaultLayout)
    .onChange(async (value) => {
      this.plugin.settings.defaultLayout = value;
      await this.plugin.saveSettings();
    }));

new Setting(containerEl)
  .setName('🌆 Cover')
  .setDesc('Display cover images for anime/manga')
  .addToggle(toggle => toggle
    .setValue(this.plugin.settings.showCoverImages)
    .onChange(async (value) => {
      this.plugin.settings.showCoverImages = value;
      await this.plugin.saveSettings();
    }));

new Setting(containerEl)
  .setName('⭐ Ratings')
  .setDesc('Display user ratings/scores')
  .addToggle(toggle => toggle
    .setValue(this.plugin.settings.showRatings)
    .onChange(async (value) => {
      this.plugin.settings.showRatings = value;
      await this.plugin.saveSettings();
    }));

new Setting(containerEl)
  .setName('📈 Progress')
  .setDesc('Display progress information')
  .addToggle(toggle => toggle
    .setValue(this.plugin.settings.showProgress)
    .onChange(async (value) => {
      this.plugin.settings.showProgress = value;
      await this.plugin.saveSettings();
    }));

new Setting(containerEl)
  .setName('🎭 Genres')
  .setDesc('Display genre tags')
  .addToggle(toggle => toggle
    .setValue(this.plugin.settings.showGenres)
    .onChange(async (value) => {
      this.plugin.settings.showGenres = value;
      await this.plugin.saveSettings();
    }));

new Setting(containerEl)
  .setName('🔲 Grid Columns')
  .setDesc('Number of columns in card grid layout')
  .addSlider(slider => slider
    .setLimits(1, 6, 1)
    .setValue(this.plugin.settings.gridColumns)
    .setDynamicTooltip()
    .onChange(async (value) => {
      this.plugin.settings.gridColumns = value;
      await this.plugin.saveSettings();
    }));

new Setting(containerEl)
  .setName('🔑 Client ID')
  .setDesc('Your Zoro application Client ID')
  .addText(text => text
    .setPlaceholder('Enter Client ID')
    .setValue(this.plugin.settings.clientId || '')
    .onChange(async (value) => {
      this.plugin.settings.clientId = value.trim();
      await this.plugin.saveSettings();
    }));

new Setting(containerEl)
  .setName('🔐 Client Secret')
  .setDesc('Your Zoro application Client Secret')
  .addText(text => text
    .setPlaceholder('Enter Client Secret')
    .setValue(this.plugin.settings.clientSecret || '')
    .onChange(async (value) => {
      this.plugin.settings.clientSecret = value.trim();
      await this.plugin.saveSettings();
    }));

new Setting(containerEl)
  .setName('🔗 Redirect URI')
  .setDesc('Your application redirect URI')
  .addText(text => text
    .setPlaceholder('http://localhost:8080/callback')
    .setValue(this.plugin.settings.redirectUri || 'http://localhost:8080/callback')
    .onChange(async (value) => {
      this.plugin.settings.redirectUri = value.trim();
      await this.plugin.saveSettings();
    }));

new Setting(containerEl)
  .setName('🔓 Authenticate')
  .setDesc('Connect your Zoro account')
  .addButton(button => button
    .setButtonText(this.plugin.settings.accessToken ? 'Re-authenticate' : 'Authenticate')
    .onClick(async () => {
      await this.plugin.authenticateUser();
    }));

new Setting(containerEl)
  .setName('🔧 Manual Token Input')
  .setDesc('If automatic authentication fails, manually paste your access token here')
  .addText(text => text
    .setPlaceholder('Paste access token here...')
    .setValue('')
    .onChange(async (value) => {
      if (value.trim()) {
        this.plugin.settings.accessToken = value.trim();
        await this.plugin.saveSettings();
        new Notice('✅ Manual token saved! Testing...');
        try {
          await this.plugin.testAccessToken();
        } catch (error) {
          new Notice(`❌ Token test failed: ${error.message}`);
        }
      }
    }))
  .addButton(button => button
    .setButtonText('Clear Token')
    .onClick(async () => {
      this.plugin.settings.accessToken = '';
      await this.plugin.saveSettings();
      new Notice('Token cleared');
      this.display();
    }));

new Setting(containerEl)
  .setName('🔑 Authentication Status')
  .setDesc(this.plugin.settings.accessToken ? 
    '✅ Authenticated (Token saved)' : 
    '❌ Not authenticated');

new Setting(containerEl)
  .setName('⚡ Power Features')
  .setDesc('Want more features? Visit our GitHub page for tips, tricks, and powerful ways to customize your notes.')
  .addButton(button => button
    .setButtonText('View Documentation')
    .onClick(() => {
      window.open('https://github.com/zara-kasi/zoro/blob/main/README.md', '_blank');
    }));

} }

module.exports = ZoroSettingTab;

