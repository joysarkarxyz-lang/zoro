async processInlineLinks(el, ctx) {
  const inlineLinks = el.querySelectorAll('a[href^="anilist:"]');

  for (const link of inlineLinks) {
    const href = link.getAttribute('href');
    
    // Optional: Show loading shimmer while data loads
    const placeholder = document.createElement('span');
    placeholder.textContent = 'üîÑ Loading AniList...';
    link.replaceWith(placeholder);

    try {
      const config = this.parseInlineLink(href);
      const data = await this.fetchAniListData(config);

      const container = document.createElement('span');
      container.className = 'anilist-inline-container';
      this.renderAniListData(container, data, config);

      placeholder.replaceWith(container);

      // ‚úÖ Cleanup if the block is removed (important for re-render safety)
      ctx.addChild({
        unload: () => {
          container.remove();
        }
      });

    } catch (error) {
      console.warn(`[Zoro] Inline link failed for ${href}:`, error);

      const errorEl = document.createElement('span');
      errorEl.className = 'anilist-inline-error';
      errorEl.textContent = `‚ö†Ô∏è ${error.message || 'Failed to load data'}`;

      placeholder.replaceWith(errorEl);
    }
  }
}

