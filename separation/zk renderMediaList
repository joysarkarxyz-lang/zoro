renderMediaList(el, entries, config) {
  const gridDiv = document.createElement('div');
  gridDiv.className = 'zoro-cards-grid';
  gridDiv.style.setProperty('--zoro-grid-columns', this.settings.gridColumns);

  entries.forEach(entry => {
    const card = this.createMediaCard(entry, config);
    gridDiv.appendChild(card);
  });

  el.empty();
  el.appendChild(gridDiv);
}


createMediaCard(entry, config) {
  const media = entry.media;
  if (!media) return document.createTextNode('⚠️ Missing media');

  const title = media.title.english || media.title.romaji || 'Untitled';

  const cardDiv = document.createElement('div');
  cardDiv.className = 'zoro-card';

  // Cover
  if (this.settings.showCoverImages && media.coverImage?.large) {
    const img = document.createElement('img');
    img.src = media.coverImage.large;
    img.alt = title;
    img.className = 'zoro-media-cover';
    cardDiv.appendChild(img);
  }

  const infoDiv = document.createElement('div');
  infoDiv.className = 'zoro-media-info';

  // Title
  const titleElement = document.createElement('h4');
  const titleLink = document.createElement('a');
  titleLink.href = this.getAniListUrl(media.id, config.mediaType);
  titleLink.target = '_blank';
  titleLink.rel = 'noopener noreferrer';
  titleLink.className = 'zoro-title-link';
  titleLink.textContent = title;
  titleElement.appendChild(titleLink);
  infoDiv.appendChild(titleElement);

  // Details
  const detailsDiv = this.createDetailsRow(entry);
  infoDiv.appendChild(detailsDiv);

  // Genres
  if (this.settings.showGenres && media.genres?.length) {
    const genresDiv = document.createElement('div');
    genresDiv.className = 'zoro-genres';
    media.genres.slice(0, 3).forEach(genre => {
      const tag = document.createElement('span');
      tag.className = 'zoro-genre-tag';
      tag.textContent = genre;
      genresDiv.appendChild(tag);
    });
    infoDiv.appendChild(genresDiv);
  }

  cardDiv.appendChild(infoDiv);
  return cardDiv;
}



createDetailsRow(entry) {
  const media = entry.media;
  const details = document.createElement('div');
  details.className = 'zoro-media-details';

  // Format
  if (media.format) {
    const format = document.createElement('span');
    format.className = 'zoro-badge zoro-format';
    format.textContent = media.format;
    details.appendChild(format);
  }

  // Status
  const status = document.createElement('span');
  status.className = `zoro-badge zoro-status clickable-status status-${entry.status?.toLowerCase()}`;
  status.textContent = entry.status ?? 'Unknown';
  status.style.cursor = 'pointer';

  if (this.settings.accessToken) {
    status.title = 'Click to edit';
    status.onclick = e => this.handleEditClick(e, entry, status);
  } else {
    status.title = 'Click to authenticate';
    status.onclick = e => {
      e.preventDefault();
      e.stopPropagation();
      this.createAuthenticationPrompt();
    };
  }

  details.appendChild(status);

  // Progress
  if (this.settings.showProgress) {
    const progress = document.createElement('span');
    progress.className = 'zoro-badge zoro-progress';
    const total = media.episodes ?? media.chapters ?? '?';
    progress.textContent = `Progress: ${entry.progress}/${total}`;
    details.appendChild(progress);
  }

  // Score
  if (this.settings.showRatings && entry.score != null) {
    const score = document.createElement('span');
    score.className = 'zoro-badge zoro-score';
    score.textContent = `★ ${entry.score}`;
    details.appendChild(score);
  }

  return details;
}


handleEditClick(e, entry, statusEl) {
  e.preventDefault();
  e.stopPropagation();

  this.createEditModal(
    entry,
    async updates => {
      try {
        await this.updateMediaListEntry(entry.media.id, updates);
        new Notice('✅ Updated!');
        this.cache.clear();
        const parent = statusEl.closest('.zoro-container');
        if (parent) {
          const block = parent.closest('.markdown-rendered')?.querySelector('code');
          if (block) this.processAniListCodeBlock(block.textContent, parent, {});
        }
      } catch (err) {
        new Notice(`❌ Update failed: ${err.message}`);
      }
    },
    () => {
      new Notice('Edit canceled.');
    }
  );
}