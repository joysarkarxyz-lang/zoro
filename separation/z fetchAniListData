async fetchAniListData(config) {
  const cacheKey = JSON.stringify(config);

  if (!config.nocache) {
    const cached = this.cache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      return cached.data;
    }
  }

  let query, variables;

  switch (config.type) {
    case 'stats':
      query = this.getUserStatsQuery();
      variables = { username: config.username };
      break;

    case 'single':
      query = this.getSingleMediaQuery();
      variables = {
        username: config.username,
        mediaId: parseInt(config.mediaId),
        type: config.mediaType
      };
      break;

    case 'search':
      query = this.getSearchMediaQuery();
      variables = {
        search: config.search,
        type: config.mediaType,
        page: config.page || 1,
        perPage: config.perPage || 20
      };
      break;

    default: // media list
      query = this.getMediaListQuery();
      variables = {
        username: config.username,
        status: config.listType,
        type: config.mediaType || 'ANIME'
      };
  }

  try {
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    };

    if (this.settings.accessToken) {
      headers['Authorization'] = `Bearer ${this.settings.accessToken}`;
    }

    const response = await requestUrl({
      url: 'https://graphql.anilist.co',
      method: 'POST',
      headers,
      body: JSON.stringify({ query, variables })
    });

    const result = response.json;

    if (!result || result.errors?.length > 0) {
      const errMsg = result.errors?.[0]?.message || 'Unknown AniList error';
      if (errMsg.includes('Private')) {
        throw new Error(this.settings.accessToken
          ? '🚫 This list is private and you lack permission.'
          : '🔒 This list is private. Authenticate to view.');
      }
      throw new Error(`❌ AniList error: ${errMsg}`);
    }

    const data = result.data;
    if (!data) throw new Error('❌ No data received from AniList.');

    if (!config.nocache) {
      this.cache.set(cacheKey, {
        data,
        timestamp: Date.now()
      });
    }

    return data;

  } catch (err) {
    console.error('[Zoro] AniList fetch failed:', err);
    throw new Error(`❌ Failed to fetch data: ${err.message}`);
  }
}