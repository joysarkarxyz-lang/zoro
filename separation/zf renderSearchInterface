renderSearchInterface(el, config) {
  el.empty();
  el.className = 'anilist-search-container';

  // Input container
  const searchDiv = document.createElement('div');
  searchDiv.className = 'anilist-search-input-container';

  const searchInput = document.createElement('input');
  searchInput.type = 'text';
  searchInput.className = 'anilist-search-input';
  searchInput.placeholder = config.mediaType === 'ANIME' ? 'Search anime...' : 'Search manga...';

  searchDiv.appendChild(searchInput);
  el.appendChild(searchDiv);

  // Results container
  const resultsDiv = document.createElement('div');
  resultsDiv.className = 'anilist-search-results';
  el.appendChild(resultsDiv);

  let searchTimeout;

  const performSearch = async () => {
    const searchTerm = searchInput.value.trim();

    if (searchTerm.length < 3) {
      resultsDiv.innerHTML = '<div class="anilist-search-message">Type at least 3 characters to search...</div>';
      return;
    }

    resultsDiv.innerHTML = `
      <div class="anilist-search-loading">
        🔍 Searching...
      </div>
    `;

    try {
      const searchConfig = {
        ...config,
        search: searchTerm,
        page: 1,
        perPage: 20
      };

      const data = await this.fetchAniListData(searchConfig);

      if (!data.Page || !data.Page.media || data.Page.media.length === 0) {
        resultsDiv.innerHTML = '<div class="anilist-search-message">😕 No results found.</div>';
        return;
      }

      this.renderSearchResults(resultsDiv, data.Page.media, config);

    } catch (error) {
      console.error('Search error:', error);
      resultsDiv.innerHTML = `<div class="anilist-search-error">❌ ${error.message}</div>`;
    }
  };

  // Event: Input with debounce
  searchInput.addEventListener('input', () => {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(performSearch, 400);
  });

  // Event: Press Enter
  searchInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      clearTimeout(searchTimeout);
      performSearch();
    }
  });

  // Optional: blur/cancel
  searchInput.addEventListener('blur', () => {
    clearTimeout(searchTimeout);
  });
}