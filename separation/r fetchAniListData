async fetchAniListData(config) {
  const cacheKey = JSON.stringify(config);
  const cached = this.cache.get(cacheKey);

  if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
    return cached.data;
  }

  let query, variables;

  if (config.type === 'stats') {
    query = this.getUserStatsQuery();
    variables = { username: config.username };
  } else if (config.type === 'single') {
    query = this.getSingleMediaQuery();
    variables = {
      username: config.username,
      mediaId: parseInt(config.mediaId),
      type: config.mediaType
    };
  } else if (config.type === 'search') {
    query = this.getSearchMediaQuery();
    variables = {
      search: config.search,
      type: config.mediaType,
      page: config.page || 1,
      perPage: config.perPage || 20
    };
  } else {
    query = this.getMediaListQuery();
    variables = {
      username: config.username,
      status: config.listType,
      type: config.mediaType || 'ANIME'
    };
  }

  try {
    const headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    };

    if (this.settings.accessToken) {
      headers['Authorization'] = `Bearer ${this.settings.accessToken}`;
    }

    const response = await requestUrl({
      url: 'https://graphql.anilist.co',
      method: 'POST',
      headers,
      body: JSON.stringify({ query, variables })
    });

    const result = response.json;

    if (!result) throw new Error('Empty response from AniList.');

    if (result.errors && result.errors.length > 0) {
      const firstError = result.errors[0];
      const isPrivate = firstError.message?.includes('Private') || firstError.message?.includes('permission');

      if (isPrivate) {
        if (this.settings.accessToken) {
          throw new Error('ðŸš« List is private and this token has no permission.');
        } else {
          throw new Error('ðŸ”’ List is private. Please authenticate to access it.');
        }
      }

      throw new Error(firstError.message || 'AniList returned an unknown error.');
    }

    if (!result.data) {
      throw new Error('AniList returned no data.');
    }

    this.cache.set(cacheKey, {
      data: result.data,
      timestamp: Date.now()
    });

    return result.data;

  } catch (error) {
    console.error('[Zoro] fetchAniListData() failed:', error);
    throw error;
  }
}