async exchangeCodeForToken(code, redirectUri) {
  const clientId = this.settings.clientId;
  const clientSecret = this.settings.clientSecret;

  const body = new URLSearchParams({
    grant_type: 'authorization_code',
    code,
    client_id: clientId,
    client_secret: clientSecret || '', // optional but safe
    redirect_uri: redirectUri,
  });

  const headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Accept': 'application/json',
  };

  try {
    const response = await requestUrl({
      url: 'https://anilist.co/api/v2/oauth/token',
      method: 'POST',
      headers,
      body: body.toString(),
    });

    const data = response?.json;

    if (!data || typeof data !== 'object') {
      console.error('[Zoro] Unexpected response from AniList:', response);
      throw new Error('⚠️ Invalid response from AniList.');
    }

    if (!data.access_token) {
      throw new Error(data.error_description || '❌ No access token returned by AniList.');
    }

    // Store auth details
    this.settings.accessToken = data.access_token;

    // Optional but recommended fields
    if (data.refresh_token) {
      this.settings.refreshToken = data.refresh_token;
    }

    if (data.expires_in) {
      this.settings.tokenExpiry = Date.now() + (data.expires_in * 1000);
    }

    await this.saveSettings();

    new Notice('✅ Successfully authenticated with AniList!', 4000);

    // Optional sanity check
    await this.testAccessToken?.();

  } catch (err) {
    console.error('[Zoro] Authentication error:', err);
    new Notice(`❌ Authentication failed: ${err.message}`, 5000);
    this.showManualTokenOption?.(); // optional UI fallback
  }
}